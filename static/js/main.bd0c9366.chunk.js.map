{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Options","TodoList","todos","changeUser","selectedUserId","useState","title","setTitle","status","setStatus","filteredByStatus","filter","todo","includes","all","active","completed","className","type","placeholder","value","onChange","event","target","map","classNames","htmlFor","id","checked","readOnly","userId","onClick","request","url","fetch","then","response","ok","Error","json","CurrentUser","deleteUser","user","setUser","useEffect","getUser","person","name","email","phone","App","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd0c9366.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[];\n  changeUser: (userId: number) => void;\n  selectedUserId: number;\n}\n\nenum Options {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos, changeUser, selectedUserId,\n}) => {\n  const [title, setTitle] = useState('');\n  const [status, setStatus] = useState('');\n\n  const filteredByTitle = todos.filter(todo => todo.title.includes(title));\n\n  const filteredByStatus = filteredByTitle.filter(todo => {\n    switch (status) {\n      case Options.all:\n        return true;\n\n      case Options.active:\n        return !todo.completed;\n\n      case Options.completed:\n        return todo.completed;\n\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter the title\"\n        value={title}\n        onChange={(event) => setTitle(event.target.value)}\n      />\n      <select\n        value={status}\n        onChange={(event) => setStatus(event.target.value)}\n      >\n        <option value=\"all\"> All </option>\n        <option value=\"active\"> Active </option>\n        <option value=\"completed\"> Completed </option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredByStatus.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`${todo.id}`}\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                    selectedUserId === todo.userId,\n                  },\n                  'button',\n                )}\n                type=\"button\"\n                onClick={() => {\n                  changeUser(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error!');\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return request('/todos');\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ninterface Props {\n  userId: number;\n  deleteUser: (userId: number) => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userId, deleteUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(person => {\n        setUser(person);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user && (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {user?.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n          <button\n            type=\"button\"\n            onClick={() => deleteUser(0)}\n          >\n            Clear\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          changeUser={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              deleteUser={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}